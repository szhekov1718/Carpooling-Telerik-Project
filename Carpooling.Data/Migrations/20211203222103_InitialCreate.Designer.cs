// <auto-generated />
using System;
using Carpooling.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Carpooling.Data.Migrations
{
    [DbContext(typeof(CarpoolingContext))]
    [Migration("20211203222103_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Carpooling.Data.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442151"),
                            IsDeleted = false,
                            Rating = 5,
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442142"),
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442146"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442143")
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442152"),
                            IsDeleted = false,
                            Rating = 4,
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442144"),
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442146"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442141")
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442153"),
                            IsDeleted = false,
                            Rating = 3,
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442142"),
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442148"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442145")
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442154"),
                            IsDeleted = false,
                            Rating = 2,
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442144"),
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442148"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442141")
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442155"),
                            IsDeleted = false,
                            Rating = 1,
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442144"),
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442148"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442153")
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Image", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alternative")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TravelRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442142"),
                            IsDeleted = false,
                            TravelRole = 2
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442144"),
                            IsDeleted = false,
                            TravelRole = 1
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EndDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FreeSpots")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StartDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442146"),
                            Departure = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            EndDestination = "Plovdiv",
                            FreeSpots = 3,
                            IsDeleted = false,
                            StartDestination = "Sofia",
                            TravelStatus = 0
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442148"),
                            Departure = new DateTime(2021, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442145"),
                            EndDestination = "Sofia",
                            FreeSpots = 3,
                            IsDeleted = false,
                            StartDestination = "Plovdiv",
                            TravelStatus = 0
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.TripCandidate", b =>
                {
                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("TripId", "UserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("TripCandidates");

                    b.HasData(
                        new
                        {
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442146"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442141"),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            Id = new Guid("143b692d-330e-405d-a019-c3d728442149"),
                            IsApproved = false,
                            IsDeleted = false
                        },
                        new
                        {
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442148"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442141"),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442145"),
                            Id = new Guid("143b692d-330e-405d-a019-c3d728442150"),
                            IsApproved = true,
                            IsDeleted = false
                        },
                        new
                        {
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442146"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442153"),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            Id = new Guid("143b692d-330e-405d-a019-c3d728442151"),
                            IsApproved = true,
                            IsDeleted = false
                        },
                        new
                        {
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442148"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442153"),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442145"),
                            Id = new Guid("143b692d-330e-405d-a019-c3d728442152"),
                            IsApproved = false,
                            IsDeleted = false
                        },
                        new
                        {
                            TripId = new Guid("943b692d-330e-405d-a019-c3d728442146"),
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442233"),
                            DriverId = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            Id = new Guid("143b692d-330e-405d-a019-c3d828442153"),
                            IsApproved = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.TripComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripComments");
                });

            modelBuilder.Entity("Carpooling.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            Email = "stenlyto@abv.bg",
                            FirstName = "Stanislav",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Simeonov",
                            Password = "cd5392bb8db39640ea5ee097ce0a832f8e506cc1c0ca685812575acd83ee5a8c",
                            PhoneNumber = "0854545454",
                            Username = "Stenlyto"
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442141"),
                            Email = "miro44@abv.bg",
                            FirstName = "Stanimir",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Ivanov",
                            Password = "b6bd0cb173bd0081e448a2400b622f75ddb8cc36c17edebf0ba3d1a08fa164c0",
                            PhoneNumber = "0864646464",
                            Username = "Mirko"
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442145"),
                            Email = "pepi14@abv.bg",
                            FirstName = "Petko",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Mitev",
                            Password = "428ed7ff0b40a507792b58445998623722c87818bcbdec0869010e5340df6fb0",
                            PhoneNumber = "0812122112",
                            Username = "Pepi"
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442153"),
                            Email = "gogi@abv.bg",
                            FirstName = "Georgi",
                            IsAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Mitev",
                            Password = "2c4950b025be3ac9215b130365e974a9a400fb8b5984f2f31db747b86b962ffd",
                            PhoneNumber = "0854545459",
                            Username = "gogi"
                        },
                        new
                        {
                            Id = new Guid("943b692d-330e-405d-a019-c3d728442233"),
                            Email = "tisho@abv.bg",
                            FirstName = "Todor",
                            IsAdmin = true,
                            IsBlocked = false,
                            IsDeleted = false,
                            LastName = "Todorov",
                            Password = "d54d0553dd78e8aea5db95ffa176de9019bce947fc02aecca916378ae216a4e3",
                            PhoneNumber = "0854545453",
                            Username = "tisho"
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeedbacksCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("RatingSum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442144"),
                            FeedbacksCount = 0,
                            Rating = 0.0,
                            RatingSum = 0
                        },
                        new
                        {
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442143"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442142"),
                            FeedbacksCount = 0,
                            Rating = 0.0,
                            RatingSum = 0
                        },
                        new
                        {
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442145"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442142"),
                            FeedbacksCount = 0,
                            Rating = 0.0,
                            RatingSum = 0
                        },
                        new
                        {
                            UserId = new Guid("943b692d-330e-405d-a019-c3d728442145"),
                            RoleId = new Guid("943b692d-330e-405d-a019-c3d728442144"),
                            FeedbacksCount = 0,
                            Rating = 0.0,
                            RatingSum = 0
                        });
                });

            modelBuilder.Entity("Carpooling.Data.Models.Feedback", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.Trip", "Trip")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Trip", b =>
                {
                    b.HasOne("Carpooling.Data.Models.User", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Carpooling.Data.Models.TripCandidate", b =>
                {
                    b.HasOne("Carpooling.Data.Models.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.Trip", "Trip")
                        .WithMany("TripCandidates")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", "Passanger")
                        .WithMany("TripCandidates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Passanger");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Carpooling.Data.Models.TripComment", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Carpooling.Data.Models.User", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Image", null)
                        .WithOne("User")
                        .HasForeignKey("Carpooling.Data.Models.User", "ImageId");
                });

            modelBuilder.Entity("Carpooling.Data.Models.UserRole", b =>
                {
                    b.HasOne("Carpooling.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpooling.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Image", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Carpooling.Data.Models.Trip", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("TripCandidates");
                });

            modelBuilder.Entity("Carpooling.Data.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("TripCandidates");

                    b.Navigation("Trips");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
